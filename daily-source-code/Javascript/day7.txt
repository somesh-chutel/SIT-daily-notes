<----------------JavaScript for loop------------------------>

In JavaScript, the for loop is used for iterating over a block of code a certain number of times, 
or to iterate over the elements of an array and strings.


JavaScript for loop Syntax : 

for (initialExpression; condition; updateExpression) {
    // for loop body
} 


Example : 

for (let i = 0; i < 3; i++) {
    console.log("Hello, world!");
}

// Output:
// Hello, world!
// Hello, world!
// Hello, world! 

Here,

initialExpression - Initializes a counter variable.
condition - The condition to be evaluated. If true, the body of the for loop is executed.
updateExpression - Updates the value of initialExpression.
Once an iteration of the loop is completed, the condition is evaluated again. The process continues until the condition is false.


__________________________________________________________________________________________

Example 1: Print Numbers From 1 to 5 

for (let i = 1; i < 6; i++) {
    console.log(i);



} 

In this example, we have printed numbers from 1 to 5 using a for loop.


Here is how this program works:

Iteration	        Variable	        Condition: i < 6	        Action
1st	                i = 1	            true	                    1 is printed. 
                                                                    (i is increased to 2.)

2nd	                i = 2               true	                    2 is printed. 
                                                                    (i is increased to 3.)

3rd	                i = 3	            true	                    3 is printed. 
                                                                    (i is increased to 4.)

4th	                i = 4               true	                    4 is printed. 
                                                                    (i is increased to 5.)

5th	                i = 5               true	                    5 is printed. 
                                                                    (i is increased to 6.)

6th	                i = 6               false	                    The loop is terminated.



__________________________________________________________________________________________

Example 2: Display Sum of n Natural Numbers : 

// program to display the sum of natural numbers

let sum = 0;
const n = 100

// loop from i = 1 to i = n
// in each iteration, i is increased by 1
for (let i = 1; i <= n; i++) {
    sum += i;  // sum = sum + i
}

console.log(`sum: ${sum}`);

// Output: sum: 5050   

__________________________________________________________________________________________

<------------------Nested for Loops------------------------>

A for loop can also have another for loop inside it. 
For each cycle of the outer loop, the inner loop completes its entire sequence of iterations. For example,

// outer loop 
for (let i = 0; i < 3; i++) {

    // inner loop
    for (let j = 0; j < 2; j++) {
        console.log(`i = ${i}, j = ${j}`);
    }

}


JavaScript Infinite for loop : 

In JavaScript, we can create an infinite for loop by setting a condition that always evaluates to true. For example,

for (let i = 0; true; i++) {
    console.log("This loop will run forever!");
}


__________________________________________________________________________________________

JavaScript while Loop : 

The while loop repeatedly executes a block of code as long as a specified condition is true.

The syntax of the while loop is: 

while (condition) {
    // body of loop
}

Here,

The while loop first evaluates the condition inside ( ).
If the condition evaluates to true, the code inside { } is executed.
Then, the condition is evaluated again.
This process continues as long as the condition evaluates to true.
If the condition evaluates to false, the loop stops.


Example 1: Display Numbers From 1 to 3 : 

// initialize variable i
let i = 1;

// loop runs until i is less than 4
while (i < 4) {
    console.log(i);
    i += 1;
}

Output : 
1
2
3

__________________________________________________________________________________________

JavaScript break Statement : 

The break statement terminates the loop immediately when it's encountered. 

// program to print the value of i
for (let i = 1; i <= 5; i++) {
    // break condition
    if (i == 3) {
        break;
    }
    console.log(i);
}

// Output:
// 1
// 2 

__________________________________________________________________________________________

JavaScript continue Statement : 

The continue statement skips the current iteration of the loop and proceeds to the next iteration. 

// program to check for odd numbers
for (let i = 1; i <= 5; i++) {
    // skip the iteration if i is even
    if (i % 2 === 0) {
        continue;
    }
    console.log(i);
}

// Output:
// 1
// 3
// 5

__________________________________________________________________________________________

JavaScript for... of Loop : 

The for...of loop was introduced in the later versions of JavaScript ES6.

The for..of loop in JavaScript allows you to iterate over iterable objects (arrays, sets, maps, strings etc).

The syntax of the for...of loop is: 

for (element of iterable) {
    // body of for...of
} 

Here,

iterable - an iterable object (array, set, strings, etc).
element - items in the iterable
In plain English, you can read the above code as: for every element in the iterable, run the body of the loop.

You can use for...of loop to iterate over string values. For example, 

// string
const string = 'code';

// using for...of loop
for (let i of string) {
    console.log(i);
}

Output :
c
o
d
e 

__________________________________________________________________________________________

JavaScript for...in With Strings :

You can also use the for...in loop to iterate over string values. For example, 

const string = 'code';

// using for...in loop
for (let i in string) {
    console.log(string[i]);
}; 

Output :

c
o
d
e 


__________________________________________________________________________________________

<------------------JavaScript switch...case Statement--------------------------->

The JavaScript switch...case statement executes different blocks of code based on the value of a given expression. 


Syntax of the switch...case Statement : 

switch (expression) {

    case value1:
        // code block to be executed
        // if expression matches value1
        break;

    case value2:
        // code block to be executed
        // if expression matches value2
        break;

    ...

    default:
        // code block to be executed
        // if expression doesn't match any case
}

Here,

The switch statement first evaluates the expression.
After that, it compares the result against value1. If a matching is found, the corresponding code block is executed. 
Then, the break statement immediately stops further checking of other cases.
If there is no match for value1, the program compares the result with the next specified case value (value2). 
This process continues until a matching case is found.
If none of the case values match, the code block in the default block is executed.
Let's try to understand this process with a flowchart below.




Example :

let trafficLight = "green";
let message = ""
 
switch (trafficLight) {
    case "red":
        message = "Stop immediately.";
        break;
    case "yellow":
        message = "Prepare to stop.";
        break;
    case "green":
        message = "Proceed or continue driving.";
        break;
    default:
        message = "Invalid traffic light color.";
}
 
console.log(message)
 
// Output: Proceed or continue driving.

The above program checks the value of trafficLight and prints the corresponding meaning of the traffic light. 
If the value doesn't match any of the specified cases, it prints Invalid traffic light color.

__________________________________________________________________________________________
__________________________________________________________________________________________

Switch Examplese For Practice :

Simple Calculator Using switch...case : 

// take user input for two numbers
let number1 = Number(prompt("Enter the value of number1: "));
let number2 = Number(prompt("Enter the value of number2: "));

// take user input to select an operator 
const operator = prompt("Enter a operator ( either +, -, * or / ): ");

switch(operator) {

    case "+":
        result = number1 + number2;
        console.log(`${number1} + ${number2} = ${result}`);
        break;

    case "-":
        result = number1 - number2;
        console.log(`${number1} - ${number2} = ${result}`);
        break;

    case "*":
        result = number1 * number2;
        console.log(`${number1} * ${number2} = ${result}`);
        break;

    case "/":
        result = number1 / number2;
        console.log(`${number1} / ${number2} = ${result}`);
        break;

    default:
        console.log("Invalid operator");
}

Sample Output 1

Enter the value of number1: 6
Enter the value of number2: 3
Enter a operator ( either +, -, * or / ): *
6 * 3 = 18

Sample Output 2

Enter the value of number1: 6
Enter the value of number2: 3
Enter a operator ( either +, -, * or / ): +
6 + 3 = 9


__________________________________________________________________________________________