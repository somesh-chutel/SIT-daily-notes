JavaScript Operators : 

JavaScript operators are special symbols that perform unique operations on one or more operands (values). For example,

2 + 3;  // 5 

The + operator performs addition, we have used it here to add the operands 2 and 3.


JavaScript Operator Types
Here is a list of different JavaScript operators :

Arithmetic Operators
Assignment Operators 
Comparison Operators
Logical Operators
Bitwise Operators
String Operators
Miscellaneous Operators


1. Commonly Used Arithmetic Operators : 

Operator	    Name	                            Example
+	            Addition	                        3 + 4  // 7
-	            Subtraction	                        5 - 3  // 2
*	            Multiplication	                    2 * 3  // 6
/	            Division	                        4 / 2  // 2
%	            Remainder(modulus)	                5 % 2  // 1
++	            Increment (increments by 1)	        ++5 or 5++  // 6
--	            Decrement (decrements by 1)	        --4 or 4--  // 3
**	            Exponentiation (Power)	            4 ** 2  // 16


Example 1: Arithmetic Operators in JavaScript : 

let x = 5;

console.log("x + 3 = ", x + 3); 
console.log("x - 3 =", x - 3);
console.log("x * 3 =", x * 3);
console.log("x / 3 =", x / 3);
console.log("x % 3 =", x % 3);
console.log("x ** 3 =", x ** 2);

Output : 

x + 3 =  8
x - 3 = 2
x * 3 = 15
x / 3 = 1.6666666666666667
x % 3 = 2
x ** 3 = 25


Example 2: JavaScript Increment and Decrement Operators : 

let x = 5;

console.log("Prefix Increment: ++x =", ++x);
console.log("Postfix Increment: x++ =", x++);
console.log("After Postfix Increment: x =", x);

console.log("\nPrefix Decrement: --x =", --x);
console.log("Prefix Decrement: x-- =", x--);
console.log("After Prefix Decrement: x =", x);

Output : 

Prefix Increment: ++x = 6
Postfix Increment: x++ = 6
After Postfix Increment: x = 7

Prefix Decrement: --x = 6
Prefix Decrement: x-- = 6
After Prefix Decrement: x = 5

###########################################################################################

2. Commonly Used Assignment Operators : 

Operator	       Name	                            Example
=	               Assignment Operator	            a = 7;
+=	               Addition Assignment	            a += 5;  // a = a + 5
-=	               Subtraction Assignment	        a -= 2;  // a = a - 2
*=	               Multiplication Assignment	    a *= 3;  // a = a * 3
/=	               Division Assignment	            a /= 2;  // a = a / 2
%=	               Remainder Assignment	            a %= 2;  // a = a % 2
**=	               Exponentiation Assignment	    a **= 2;  // a = a**2

Example 3: Assignment Operators in JavaScript : 

// assignment operator
let a = 7;
console.log(a);  // 7

// addition assignment operator
a += 5;  // a = a + 5
console.log(a);  // 12

// subtraction assignment operator
a -= 5;  // a = a - 5
console.log(a);  // 7

// multiplication assignment operator
a *= 2;  // a = a * 2
console.log(a);  // 14

// division assignment operator
a /= 2;  // a = a / 2
console.log(a);  // 7

// remainder assignment operator
a %= 2;  // a = a % 2
console.log(a);  // 1

// exponentiation assignment operator
a **= 2;  // a = a**2
console.log(a);  // 1


###################################################################################################

3. JavaScript Comparison Operators : 

We use comparison operators to compare two values and return a boolean value (true or false). For example,

const a = 3, b = 2;
console.log(a > b);

// Output: true 

Here, we have used the > comparison operator to check whether a (whose value is 3) is greater than b (whose value is 2).

Commonly Used Comparison Operators : 

Operator	        Meaning	                    Example
==	                Equal to	                3 == 5 gives us false
!=	                Not equal to	            3 != 4 gives us true
>	                Greater than	            4 > 4 gives us false
<	                Less than	                3 < 3 gives us false
>=	                Greater than or equal to	4 >= 4 gives us true
<=	                Less than or equal to	    3 <= 3 gives us true
===	                Strictly equal to	        3 === "3" gives us false
!==	                Strictly not equal to	    3 !== "3" gives us true


Example 4: Comparison Operators in JavaScript : 

console.log("2 == 2 is", 2 == 2);  // true
console.log("3 != 3 is", 3 != 3);  // false
console.log("2 === '2' is", 2 === "2");  // false
console.log("2 !== '2' is", 2 !== "2");  // true
console.log("3 > 3 is", 3 > 3);  // false
console.log("2 > 2 is", 2 > 2);  // false
console.log("3 >= 3 is", 3 >= 3);  // true
console.log("2 <= 2 is", 2 <= 2);  // true

Output : 

2 == 2 is true
3 != 3 is false
2 === '2' is false
2 !== '2' is true
3 > 3 is false
2 > 2 is false
3 >= 3 is true
2 <= 2 is true

Difference between equality (== and !=) and strict equality (=== and !==) operators.

The equality operators (== and !=) convert both operands to the same type before comparing their values. For example,

console.log(3 == "3");  // true

Here, we used the == operator to compare the number 3 and the string 3.
By default, JavaScript converts string 3 to number 3 and compares the values.

However, the strict equality operators (=== and !==) do not convert operand types before comparing their values. For example,

console.log(4 === "4");  // false

Here, JavaScript didn't convert string 4 to number 4 before comparing their values.
Thus, the result is false, as number 4 isn't equal to string 4.



###################################################################################################################################


4. JavaScript Logical Operators : 

We use logical operators to perform logical operations on boolean values. For example,

const x = 5, y = 3;
console.log((x < 6) && (y < 5));

// Output: true

Here, && is the logical operator AND. Since both x < 6 and y < 5 are true, the combined result is true.

Commonly Used Logical Operators : 

Operator	    Syntax	            Description
&&              (Logical AND)	    expression1 && expression2	true only if both expression1 and expression2 are true
||              (Logical OR)	    expression1 || expression2	true if either expression1 or expression2 is true
!               (Logical NOT)	    !expression	false if expression is true and vice versa





Example 5: Logical Operators in JavaScript : 

let x = 3;

// logical AND
console.log((x < 5) && (x > 0));  // true
console.log((x < 5) && (x > 6));  // false

// logical OR
console.log((x > 2) || (x > 5));  // true
console.log((x > 3) || (x < 0));  // false

// logical NOT
console.log(!(x == 3));  // false
console.log(!(x < 2));  // true


##############################################################################################################################

6. JavaScript String Operators : 

In JavaScript, you can use the + operator to concatenate (join) two or more strings. For example,

// concatenation operator
let str = "Hel" + "lo";
console.log(str);

str += " World";  // str = str + " World"
console.log(str);

Output : 

Hello
Hello World


Here, we used + on strings to perform concatenation. However, when we use + with numbers, it performs addition.





